/**
* Query "Import" (import)
*
* Importieren der Testgraphen in das jeweilige GDBMS unter Verwendung von Bulk-* Load-Mechanismen.
*
*/

/**
* Query "Random Nodes" (random_read)
*
* Zufällige Auswahl einzelner Produkte und Nutzer sowie vollständiges Auslesen 
* ihrer Attribute.
* 
* Lokal, Einfache Leseanfrage
*
*/

// Cypher
START a=node(42) RETURN *;

// Gremlin
g.v(42).map();

/**
* Query "Similar Products" (sim_products)
*
* Zufällige Auswahl eines Produktes und anschließendes Traversieren  ähnlicher 
* Produkte bis Abstand <= 2. Die Produkttitel sollen ausgegeben werden, 
* jeder Titel soll einmalig in der Ergebnismenge sein.
* 
* Lokale Traversierung, UNIQUE-Bedingung
*
*/

// Cypher
START n=node(22) MATCH n-[:SIMILAR_TO*..2]-s RETURN DISTINCT s.title AS title;

// Gremlin
p.both('SIMILAR_TO').loop(1){it.loops <= 2}.dedup().title

/**
* Query "FOAF-Reviews" (foaf_reviews)
*
* Zufällige Auswahl eines Nutzers und anschließende Selektion der Produkte, 
* für die Freunde oder deren Freunde ein Review geschrieben haben. Das 
* Ergebnis soll nach Produkttitel gruppiert und nach durchschnittlicher 
* Bewertung sortiert werden.
* 
* Lokal, Traversierung, Gruppierung, Aggregation
*
*/

* Cypher
START n=node(42)
MATCH n-[:FRIEND_OF*1..2]-()<-[r:REVIEWED_BY]-p   
RETURN p.title AS title, avg(r.rating) AS weight  
ORDER BY weight DESC;

* Gremlin
a.both('FRIEND_OF').both('FRIEND_OF').inE('REVIEWED_BY').groupBy{it.outV.next().title}{it.rating}{it.sum() * 1.0 / it.size()}.cap.orderMap(T.decr);

/**
* Query "All Paths" (path_all)
*
* Zufällige Auswahl eines Nutzers und eines Produktes und anschließendes 
* Berechnen aller Pfade der Länge <= 4 zwischen beiden Knoten. Dabei 
* sollen nur die Kantenbezeichner FRIEND_OF, REVIEWED_BY 
* und SIMILAR_TO berücksichtigt werden, die Kantenrichtung ist nicht 
* relevant. Im Ergebnis sollen die Pfade gruppiert nach Länge und der 
* jeweiligen Anzahl ausgegeben werden.
*
* Lokal, Erreichbarkeit
*
*/

* Cypher

START a=node(48089), b=node(22) 
MATCH p=a-[:FRIEND_OF|SIMILAR_TO|REVIEWED_BY*..4]-b 
RETURN length(p) AS length, count(p) AS cnt;

* Gremlin
a = g.V('__id__', 'A44FUIZX7CUVN').next();
b = g.V('__id__', '0231096704').next();
visited=[a];
a.both('FRIEND_OF','REVIEWED_BY','SIMILAR_TO').loop(1){it.object != b && it.loops < 5}.retain([b]).path._().transform{it.size() - 1}.groupCount().cap();

/**
* Query "Shortest Path" (path_shortest)
*
* Zufällige Auswahl zweier Nutzer und anschließende Berechnung des kürzesten 
* Pfades zwischen ihnen unter Berücksichtigung der Kantenbezeichner 
* FRIEND_OF, REVIEWED_BY und SIMILAR_TO. Die 
* maximale Pfadlänge beträgt 4, Kantenrichtungen werden nicht berücksichtigt. 
* Das Ergebnis soll das Attribut __id__ der Knoten innerhalb des 
* Pfades beinhalten.
*
* Lokal, Erreichbarkeit
*
*/

* Cypher (3)
START a=node(48089), b=node(22)
MATCH p=shortestPath(a-[:FRIEND_OF|:REVIEWED_BY|:SIMILAR_TO*..3]-b)
RETURN EXTRACT(n in NODES(p): n.__id__) AS path;

==>["A44FUIZX7CUVN","0679724699","0520078748","0231096704"]

* Gremlin
a = g.V('__id__', 'A44FUIZX7CUVN').next();
b = g.V('__id__', '0231096704').next();
visited=[a];
a.both('FRIEND_OF', 'REVIEWED_BY', 'SIMILAR_TO').except(visited).store(visited).loop(3){it.object != b && it.loops < 4}.retain([b]).path{it.__id__};

==>[A44FUIZX7CUVN, 0679724699, 0520078748, 0231096704]

/**
* Query "Reading Regions" (top_regions)
*
* Auswahl aller Produkte, welche der Gruppe 'Books' angehören und das 
* Prädikat salesrank <= 500000 erfüllen. Das Ergebnis soll nach 
* dem Attribut region jener Nutzer gruppiert werden, welche die 
* Produkte mit einem rating >= 3 bewertet haben und dies für 
* >= 5 Nutzer hilfreich war. Darüber hinaus soll das Ergebnis nach der 
* Anzahl der Produkte pro Region sortiert und die oberen 10 Regionen 
* ausgegeben werden.
*
* Lokal, Traversierung, Aggregation / Gruppierung, Attributeinschränkung
*
*/

* Cypher
START g=node(2)
MATCH g<-[:BELONGS_TO]-p-[r:REVIEWED_BY]->u
WHERE p.salesrank < 500000
RETURN u.region AS region, count(u) AS cnt
ORDER BY cnt DESC
LIMIT 10;

* Gremlin
group = g.V('__id__', 'g_0').next();
group.in('BELONGS_TO').filter{it.salesrank < 500000}.out('REVIEWED_BY').groupCount{it.region}.cap().orderMap(T.decr)[0..9];

/**
* Query "Similar Reviews Pattern" (sim_pattern)
*
* Zufällige Auswahl eines Nutzers und anschließendes Bestimmen seiner Freunde, 
* die für mindestes ein übereinstimmendes Produkt Reviews geschrieben haben. 
* Das Ergebnis soll den Nutzer selbst, die Freunde des Nutzers, die Reviews
* und die übereinstimmende Produktmenge beinhalten.
*
* Global, Mustersuche (Dreiecke) mit Bindung an Datenbasis und
* Attributeinschränkung
*
*/

// Cypher

// with neo4j ids
START user=node(*)
MATCH user:User-[:FRIEND_OF]-friends1:User<-[:REVIEWED_BY]-products:Product,
products:Product-[:REVIEWED_BY]->friends2:User
WITH user, products, collect(distinct id(friends1)) as f1, collect(distinct id(friends2)) as f2
WITH user, products, filter(x in f1 : x in f2) as intersect
WITH user, products, count(products) as n, intersect, length(intersect) as intersect_cnt
WHERE intersect_cnt > 1 and n > 0
RETURN user.__id__ as user_id, n, id(products) as product_id, intersect as friends, intersect_cnt
ORDER BY n DESC, intersect_cnt DESC, product_id
LIMIT 25;

! see https://groups.google.com/forum/?hl=de#!topic/neo4j/GmGaX5xKld0

// with original ids (this one is used in the benchmarks)

START user=node(81632)
MATCH user-[:FRIEND_OF]-friends1<-[:REVIEWED_BY]-products,
products-[:REVIEWED_BY]->friends2
WITH user, products, collect(distinct friends1.__id__) as f1, collect(distinct friends2.__id__) as f2
WITH user, products, filter(x in f1 : x in f2) as intersect
WITH user, products, count(products) as n, intersect, length(intersect) as intersect_cnt
WHERE intersect_cnt > 1 and n > 0
RETURN id(user) as user_id, n, products.__id__ as product_id, intersect as friends, intersect_cnt;



// Gremlin

g = TitanFactory.open('../../master_thesis/benchmark/out/titan-graph_42_100_3_2');
u=g.V('__id__', 'AOTMWB4YJKX3Z').next();
u=g.v(326528);
u=g.v(11435);
m = [:]; common_products = [] as Set;

// get common products
u.both('FRIEND_OF').dedup().transform({ it.in('REVIEWED_BY').dedup() }).scatter().groupCount(m).filter({ m[it] > 1 }).fill(common_products);

// get the friends (not necessary for the result)
u.both('FRIEND_OF').as('friend').filter({ it.in('REVIEWED_BY').retain(common_products).count() >= 1 })

// table
common_products._().as('product').transform({ it.out('REVIEWED_BY').as('friend').both('FRIEND_OF').retain([u]).back('friend').toSet() }).as('friends').table().cap().next()

// table without adam
common_products._().as('product').transform({
	it.out('REVIEWED_BY').filter({
		it.in('REVIEWED_BY').retain(common_products)[0..<2].count() >= 1
	}).as('friend').both('FRIEND_OF').retain([u]).back('friend').toSet()
}).as('friends').table().cap().next();

/**
* Query "Triangle Pattern 2" (triangle_pattern_2)
*
* Finden aller Dreicksbeziehungen folgender Art: Ein Produkt p besitzt 
* eine Bewertung r die für mindestens 10 Personen hilfreich war. 
* Der bewertende Nutzer u1 ist mit einem weiteren Nutzer u2 befreundet, 
* der älter als 20 Jahre alt ist und ebenfalls das Produkt p bewertet 
* hat. Es sollen p, u1, u2 und r bestimmt werden.
*
* Global, Mustersuche (Dreiecke) mit Bindung an Datenbasis und
* Attributeinschränkung
*
*/

// Cypher

// Gremlin

/**
* Helping stuff
*/

g = TitanFactory.open('../../master_thesis/benchmark/out/titan-graph_611_50_4_2');
a = g.V('__id__', 'A16MCCBGBZIZVR').next(); // user
b = g.V('__id__', 'A29QUUI26CAZO3').next(); // user
c = g.V('__id__', 'A44FUIZX7CUVN').next(); // user
p = g.V('__id__', '0231096704').next(); // product (neo id: 22)

// non-unique foaf
START n=node(42) MATCH n-[:FRIEND_OF*..2]-p return count(p); // 496
v.both('FRIEND_OF').both('FRIEND_OF').count(); // 496

// unique foaf
START n=node(42) MATCH n-[:FRIEND_OF]-()-[:FRIEND_OF]-p return count(distinct p); // 169
v.both('FRIEND_OF').dedup.both('FRIEND_OF').dedup.count(); // 169

// non unique products
START n=node(42) MATCH n-[:FRIEND_OF*1..2]-()<-[:REVIEWED_BY]-p return count(p); // 19
v.both('FRIEND_OF').both('FRIEND_OF').in('REVIEWED_BY').count(); // 19


// unique products
START n=node(42) MATCH n-[:FRIEND_OF*1..2]-()<-[:REVIEWED_BY]-p return count(distinct p); // 4
v.both('FRIEND_OF').both('FRIEND_OF').in('REVIEWED_BY').dedup.count(); // 4

// Gremlin
// number of incoming edges for products
v.both('FRIEND_OF').both('FRIEND_OF').inE('REVIEWED_BY').as('r').outV.groupCount().cap()


// top 5 degree
START n=node(*)
MATCH n-[r]-()
RETURN n, count(r) as degree
ORDER BY degree DESC
LIMIT 10;


