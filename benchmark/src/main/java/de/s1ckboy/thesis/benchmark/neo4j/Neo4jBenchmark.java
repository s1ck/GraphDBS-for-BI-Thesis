package de.s1ckboy.thesis.benchmark.neo4j;

import java.util.ArrayList;
import java.util.List;

import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.index.Index;
import org.neo4j.tooling.GlobalGraphOperations;

import de.s1ckboy.thesis.benchmark.Benchmark;
import de.s1ckboy.thesis.benchmark.Configs;
import de.s1ckboy.thesis.benchmark.Constants;

public abstract class Neo4jBenchmark extends Benchmark {
    /**
     * Indexes nodes by Constants.KEY_NODE_EDGE_ID
     */
    protected Index<Node> nodeIdx;
    /**
     * Neo4j instance
     */
    protected GraphDatabaseService graphDB;
    /**
     * Needed for embedded Cypher execution
     */
    protected ExecutionEngine engine;
    /**
     * Used during warmup and for random selection
     */
    protected List<Long> reviewIDs;
    /**
     * Used during runs
     */
    protected Transaction tx;
    /**
     * Used if no warmup is actice.
     */
    protected static long[] ids = new long[] { 163684, 58745, 17458, 131874,
	    177403, 195296, 211526, 84703, 89536, 199704, 46436, 201616,
	    130410, 58918, 197186, 209854, 114760, 130761, 199704, 101346,
	    52299, 91538, 132040, 62513, 129727, 201286, 9140, 206050, 114760,
	    89536, 76802, 196717, 76028, 14451, 96100, 195255, 194800, 164492,
	    116715, 101346, 43691, 24217, 117679, 64386, 166877, 209169,
	    157817, 111980, 146300, 115403, 81726, 8382, 35981, 147472, 155484,
	    139434, 35440, 33843, 124462, 164492, 93199, 146300, 75814, 117911,
	    139434, 40130, 91538, 161278, 158641, 93383, 122362, 154024,
	    180133, 101346, 47871, 181979, 192804, 196385, 111734, 158248,
	    56862, 8236, 144216, 105152, 68843, 210462, 143780, 153069, 158641,
	    86079, 91538, 64573, 110428, 187170, 132777, 85211, 25610, 194800,
	    117679, 41068, 24135, 192804, 108979, 81192, 130665, 155416, 75448,
	    195080, 180941, 120396, 72727, 204775, 42650, 35996, 40130, 185726,
	    61487, 141229, 137423, 11453, 66327, 206050, 196649, 148822,
	    102339, 42198, 96100, 157823, 46892, 135366, 187086, 211189, 20543,
	    30493, 168348, 100594, 64386, 72329, 164945, 42650, 139434, 174288,
	    89023, 155484, 90408, 122362, 58745, 187920, 155484, 19227, 108929,
	    105562, 135020, 163684, 176257, 9329, 194800, 155484, 117679,
	    192804, 151002, 147824, 176475, 11071, 26053, 132040, 68743, 90540,
	    125098, 101346, 101235, 101757, 97656, 181979, 154908, 129468,
	    166893, 49267, 65522, 163684, 131874, 93326, 131627, 179928, 42968,
	    42885, 121271, 120610, 60699, 150077, 64386, 147465, 50140, 427,
	    153257, 35981, 128541, 210462, 78792, 116817, 91538, 197811, 17609,
	    194776, 192804, 71056, 148822, 148024, 12632, 146293, 155484,
	    20369, 206795, 26053, 64573, 30975, 181351, 81726, 2304, 148691,
	    170665, 38256, 78632, 128045, 6295, 28652, 205659, 66162, 97480,
	    192244, 153069, 86777, 173964, 46684, 58811, 138556, 120615,
	    150077, 127074, 132040, 192804, 129727, 154024, 173964, 69915,
	    125048, 153069, 170254, 4858, 124078, 35365, 106739, 6295, 13969,
	    11614, 39243, 193255, 149365, 70587, 148822, 196319, 137395,
	    119429, 41609, 162217, 191753, 151002, 78823, 73694, 35370, 165672,
	    21270, 82117, 195296, 166893, 92349, 119231, 9140, 150077, 163404,
	    126457, 92120, 144070, 31026, 197186, 18849, 11071, 162968, 178042,
	    122852, 205466, 11676, 5956, 155484, 209169, 209951, 112111,
	    114760, 190522, 17458, 108603, 67785, 192244, 148822, 40130, 95344,
	    35981, 199593, 149365, 427, 59255, 151092, 9117, 143780, 36659,
	    178085, 169321, 210462, 163684, 86164, 71398, 116817, 101987,
	    142073, 46777, 194800, 163684, 197186, 40540, 163931, 149365,
	    13809, 108135, 36659, 163591, 168653, 161756, 69616, 20369, 88525,
	    139434, 195544, 55856, 68789, 120396, 87454, 157182, 209169, 42347,
	    108284, 151944, 205466, 158641, 153069, 102023, 169489, 197186,
	    127009, 8484, 35981, 122362, 94890, 196649, 139434, 43388, 116715,
	    135020, 201200, 210462, 199704, 108284, 70366, 17508, 178085,
	    157823, 112581, 25140, 176165, 69046, 175480, 211362, 47119, 66980,
	    141807, 148822, 154908, 8236, 144070, 131874, 144216, 108284,
	    167966, 141229, 6928, 17458, 84078, 178085, 116982, 192804, 4730,
	    3132, 35981, 164297, 121947, 154024, 104075, 15043, 127706, 114760,
	    70432, 192244, 168348, 144070, 175731, 75959, 144197, 199704,
	    194712, 176475, 68768, 174578, 20369, 209169, 72657, 191911,
	    192244, 145182, 2304, 127798, 81726, 116817, 106927, 82533, 151931,
	    50502, 95344, 178085, 26053, 101346, 172164, 63672, 146260, 106927,
	    114760, 154010, 105909, 18849, 210784, 120396, 68743, 157560,
	    137168, 40130, 40130, 86777, 208561, 196554, 12815, 175481, 175731,
	    20341, 133639, 188068, 138387, 81726, 95519, 149365, 81726, 176475,
	    144261, 102377, 81726, 181979, 76203, 164492, 157823, 207746,
	    123032, 151816, 101346, 143780, 197186, 116561, 62418, 155484,
	    82562, 103856, 116257, 91787, 181979, 14555, 163404, 59432, 144070,
	    11071, 69144, 189451, 166511, 20369, 149840, 8236, 154024, 150077,
	    150747, 108145, 155305, 187348, 28255, 155484, 206237, 139023,
	    159895, 38591, 64386, 101235, 98929, 17458, 114936, 111172, 135988,
	    116257, 116817, 68743, 116457, 26053, 187602, 21695, 188909,
	    107114, 181979, 159287, 110428, 157305, 8236, 143780, 9140, 69893,
	    122362, 96566, 167122, 177928, 71208, 95049, 46855, 184835, 131874,
	    40130, 101235, 93632, 203639, 93972, 134938, 124332, 163684,
	    158641, 203301, 136413, 196558, 209169, 141229, 2304, 101346,
	    130939, 53215, 183446, 6289, 192471, 14555, 97215, 427, 20954,
	    116257, 206050, 166893, 98305, 53323, 58686, 154908, 135020,
	    195296, 151002, 6295, 151931, 50169, 109699, 16212, 127706, 143290,
	    42649, 209169, 21554, 117387, 73266, 197186, 68055, 126721, 154908,
	    18338, 35141, 84800, 48744, 100744, 158641, 18849, 106088, 155413,
	    123208, 161024, 189444, 173909, 42249, 8226, 89536, 197410, 176475,
	    152883, 168348, 151318, 115353, 8225, 54081, 202152, 189706,
	    130939, 117679, 99335, 154024, 211107, 145381, 168348, 102525,
	    86164, 206408, 199704, 20393, 13486, 73772, 209169, 157498, 20369,
	    86416, 63860, 81726, 114760, 35981, 121131, 168348, 24534, 186635,
	    150077, 101235, 84642, 197410, 164297, 95344, 80220, 196649,
	    146378, 203351, 16456, 192244, 154072, 160890, 150747, 163404,
	    119200, 139434, 2523, 13911, 210462, 36883, 196717, 25853, 104748,
	    66874, 47201, 158501, 81157, 127706, 44709, 15908, 69353, 6299,
	    85227, 20369, 154908, 209362, 175731, 199704, 84164, 95344, 175710,
	    26874, 185822, 42650, 132869, 189489, 176475, 19227, 173528, 76027,
	    118090, 122362, 170167, 69085, 128121, 155147, 132040, 193905,
	    154908, 96384, 60349, 94156, 59943, 177633, 143125, 172164, 65734,
	    132628, 36659, 2304, 84800, 181351, 101346, 100898, 147441, 116257,
	    5349, 205946, 74899, 148822, 81726, 148691, 122362, 120044, 129512,
	    36377, 119659, 98929, 57657, 108284, 130939, 56224, 69117, 131874,
	    78702, 148822, 140032, 136245, 64386, 106927, 141229, 2304, 17780,
	    540, 84164, 118090, 146837, 108203, 210492, 133639, 196460, 197186,
	    12390, 64066, 194800, 162968, 161194, 181979, 64992, 86777, 37863,
	    116257, 153778, 157823, 116817, 204775, 71056, 115087, 72329,
	    189489, 16726, 151931, 19227, 106927, 153069, 29647, 210462,
	    185822, 145476, 163534, 135020, 192244, 9140, 93185, 70645, 172352,
	    151931, 88532, 164297, 135853, 144070, 3763, 128475, 129727, 95344,
	    135020, 107008, 93910, 175473, 14555, 38033, 18179, 60217, 166893,
	    33578, 25056, 140478, 17458, 20369, 77937, 101235, 31453, 146300,
	    152301, 10775, 97960, 155484, 195255, 148822, 193877, 40130,
	    148822, 36669, 192839, 180553, 146327, 12590, 201536, 139434,
	    158641, 206050, 68619, 206050, 85047, 147072, 116715, 181093,
	    77061, 170447, 197186, 195669, 195255, 101235, 59249, 138130,
	    196156, 178028, 58745, 81726, 209169, 194800, 18811, 98929, 71056,
	    101235, 171313, 144070, 85310, 178085, 106514, 26053, 64386,
	    166893, 14502, 206050, 210462, 92255, 18229, 45452, 89536, 164297,
	    57733, 143780, 132847, 110214, 14665, 15357, 157823, 117679,
	    158641, 139434, 190681, 139434, 193718, 138898, 101235, 36659,
	    192244, 181979, 48744, 86777, 17458, 184756, 59591, 11843, 112111,
	    166485, 117926, 42650, 11071, 141966, 189489, 163404, 131234,
	    208860, 71401, 52432, 92034, 36659, 201257, 44709, 164297, 36659,
	    164297, 117679, 193368, 73319, 17458, 71056, 20577, 78329, 122385,
	    207641, 64583, 181979, 129971, 191489, 58745, 600, 84800, 166459,
	    175731, 7280, 168348, 97138, 96100, 101346, 126721, 89578, 98929,
	    133639, 36659, 61646, 8236, 3188, 126253, 130939, 188376, 187961,
	    107448, 3803, 184378, 96689, 168676, 161802, 51699, 18975, 200589,
	    99335, 17458, 56328, 20184, 43363, 108257, 42650, 120396, 123289,
	    158797, 70062, 86164, 126721, 135020, 117679, 89536, 87433, 196022,
	    164492, 149365, 114760, 153415, 54575, 208860, 63080, 173964,
	    146300, 203168, 173117, 132691, 114760 };

    @Override
    public void setUp() {
	cfg = Configs.get(Neo4jConstants.INSTANCE_NAME);
	// graph database instance
	graphDB = Neo4jHelper.getGraphDB(cfg);
	// cypher execution engine
	engine = new ExecutionEngine(graphDB);
	// get index (must happen in tx)
	Transaction tx = null;
	try {
	    tx = graphDB.beginTx();
	    nodeIdx = graphDB.index().forNodes(Neo4jConstants.NODE_IDX_NAME);
	    tx.success();
	} finally {
	    if (tx != null) {
		tx.finish();
	    }
	}
	reviewIDs = new ArrayList<Long>();
	super.setUp();
    }

    @Override
    public void tearDown() {
	Neo4jHelper.closeGraphDB();
    }

    @Override
    public void beforeRun() {
	tx = graphDB.beginTx();
    }

    @Override
    public void afterRun() {
	tx.finish();
    }

    @Override
    public void warmup() {
	log.info("Warming up the caches ...");
	String type = null;
	Transaction tx = null;
	try {
	    tx = graphDB.beginTx();
	    for (Node v : GlobalGraphOperations.at(graphDB).getAllNodes()) {
		if (v.hasProperty(Constants.KEY_NODE_EDGE_TYPE)) {
		    type = (String) v.getProperty(Constants.KEY_NODE_EDGE_TYPE);
		    if (type.equals(Constants.VALUE_TYPE_GROUP)) {
			groupIDs.add(v.getId());
		    } else if (type.equals(Constants.VALUE_TYPE_PRODUCT)) {
			productIDs.add(v.getId());
		    } else if (type.equals(Constants.VALUE_TYPE_USER)) {
			userIDs.add(v.getId());
		    }
		}
	    }
	    for (Relationship e : GlobalGraphOperations.at(graphDB)
		    .getAllRelationships()) {
		type = e.getType().name();
		if (type.equals(Constants.LABEL_EDGE_REVIEWED_BY)) {
		    reviewIDs.add(e.getId());
		}
	    }
	    tx.success();
	} finally {
	    tx.finish();
	}
	log.info("Products: " + productIDs.size());
	log.info("Groups: " + groupIDs.size());
	log.info("Users: " + userIDs.size());
	log.info("Reviews: " + reviewIDs.size());

	log.info("done");
    }

    @Override
    public String getDatabaseName() {
	return Neo4jConstants.INSTANCE_NAME;
    }
}